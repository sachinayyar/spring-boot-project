apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: approval-task
spec:
  params:
    - default: 'http://approval-pipeline-demo.apps.cluster-ddsr8.ddsr8.sandbox2970.opentlc.com'
      description: Link to the form for approval
      name: form-link
      type: string
    - default: server-secret
      description: 'secret name for SMTP server information (url, port, password)'
      name: server
      type: string
    - default: sachinayyar06@gmail.com
      description: sender email address
      name: sender
      type: string
    - default: ayyarsachin@gmail.com
      description: recipient email addresses (space delimited list)
      name: recipients
      type: string
    - default: $(context.pipelineRun.name)
      name: pipeline
      type: string
  steps:
    - env:
        - name: USER
          valueFrom:
            secretKeyRef:
              key: user
              name: $(params.server)
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: $(params.server)
        - name: TLS
          valueFrom:
            secretKeyRef:
              key: tls
              name: $(params.server)
        - name: SERVER
          valueFrom:
            secretKeyRef:
              key: url
              name: $(params.server)
        - name: PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: $(params.server)
      image: >-
        docker.io/library/python:3.8-alpine@sha256:e11bbd37d4371894e954421b85dbe8dd4eb7198d7cb4ed144ab529f19f57c3f1
      name: send
      resources: {}
      script: >
        #!/usr/bin/env python3

        import os, smtplib, mimetypes, time

        from email.message import EmailMessage

        port = os.getenv('PORT') 

        smtp_server = os.getenv('SERVER') 

        sender_email = "$(params.sender)"

        receiver_emails = "$(params.recipients)"

        user = os.getenv('USER') 

        password = os.getenv('PASSWORD') 


        # Set up the email message

        msg = EmailMessage()

        msg['Subject'] = 'Deployment Approval Request'

        msg['From'] = sender_email

        msg['To'] = receiver_emails

        form_link = "$(params.form-link)"

        pipeline_name = "$(params.pipeline)"

        # Generate HTML code for the button 

        button_html = f'<a href="{form_link}" target="_blank"><button
        style="padding: 10px 20px; background-color: #4CAF50; color: white;
        border: none; cursor: pointer;">Click Here</button></a>'

        html_content = f''' <html>
            <body>
                <p>Dear Team,</p>
                <br>
                <p>Deployment of {pipeline_name} application in the DEV environment is completed.</p>
                <p>To approve to QA environment, kindly click this :</p>
                <p>{button_html}</p>
                <br>
                <br>
                <p>Thanks & Regards,</p>
                <p>OCP-Team</p>
            </body>
        </html> '''

        msg.add_alternative(html_content, subtype='html')


        # Connect to the SMTP server and send the email

        def send_mail_smtp(mail, port, url, username, password):
            s = smtplib.SMTP(url, port)
            s.starttls()
            s.login(username, password)
            s.send_message(mail)
            s.quit()

        send_mail_smtp(msg, port, smtp_server, user, password)
    - image: 'python:latest'
      name: check-log-file
      resources: {}
      script: |
        #!/bin/sh

        start_time=$(date +%s)  # Get the current timestamp in seconds
        while true; do
            current_time=$(date +%s)  # Get the current timestamp in seconds
            elapsed_time=$((current_time - start_time))  # Calculate the elapsed time in seconds

            if [ -f /logs/myapp.log ]; then
              if grep -q '"approval": "true"' /logs/myapp.log; then
                echo "Approved..."
                rm -rf /logs/myapp.log
                exit 0
              elif grep -q '"approval": "false"' /logs/myapp.log; then
                echo "Rejected..."
                rm -rf /logs/myapp.log
                exit 1
              fi
            fi

            if [ $elapsed_time -ge 60 ]; then  # Check if 2 minutes (120 seconds) have elapsed
              echo "Timeout: The Approver is not submit the response with in time limit."
              exit 1
            fi

            sleep 2
          
        done
      volumeMounts:
        - mountPath: /logs
          name: logs-volume
  volumes:
    - name: logs-volume
      persistentVolumeClaim:
        claimName: source-pvc
